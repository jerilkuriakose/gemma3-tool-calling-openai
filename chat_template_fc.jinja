{{ bos_token }}
{%- if messages[0]['role'] == 'system' -%}
    {%- set first_user_prefix = messages[0]['content'] + '

' -%}
    {%- set loop_messages = messages[1:] -%}
{%- else -%}
    {%- set first_user_prefix = "" -%}
    {%- set loop_messages = messages -%}
{%- endif -%}

{%- for message in loop_messages -%}
    {%- if message['role'] == 'assistant' -%}
        {%- set role = "model" -%}
    {%- elif message['role'] == 'tool' -%}
        {%- set role = "user" -%}
    {%- else -%}
        {%- set role = "user" -%}
    {%- endif -%}

    {{ '<start_of_turn>' + role + '
' + (first_user_prefix if loop.first else "") }}
    {%- if message['role'] == 'user' and loop.first and tools -%}
At each turn, if you decide to invoke any of the function(s), it should be wrapped with ```tool_code```. The python methods described below are imported and available, you can only use defined methods. The generated code should be readable and efficient. The response to a method will be wrapped in ```tool_output``` use it to call more tools or generate a helpful, friendly response. When using a ```tool_call``` think step by step why and how it should be used.

The following Python methods are available:
```python
{%- for tool in tools %}
def {{ tool.function.name }}({% for param_name, param_info in tool.function.parameters.properties.items() %}{{ param_name }}: {{ param_info.type }}{{ ", " if not loop.last }}{% endfor %}):
    """{{ tool.function.description }}
    Args:
{%- for param_name, param_info in tool.function.parameters.properties.items() %}
        {{ param_name }}: {{ param_info.description }}
{%- endfor %}
    """
{% endfor %}
```

User: {{ message.get('content', '') }}
    {%- elif message['role'] == 'assistant' and message.get('tool_calls') -%}
        {#- Convert OpenAI tool_calls to Gemma tool_code format -#}
        {%- if message.get('content') -%}
{{ message['content'] }}

        {%- endif -%}
        {%- for tool_call in message['tool_calls'] -%}
```tool_code
print({{ tool_call.function.name }}(**{{ tool_call.function.arguments }}))
```
        {%- endfor -%}
    {%- elif message['role'] == 'tool' -%}
```tool_output
{{ message.get('content', '') }}
```
    {%- else -%}
        {{ message.get('content', '') }}
    {%- endif -%}
    {{ '<end_of_turn>
' }}
{%- endfor -%}

{%- if add_generation_prompt -%}
<start_of_turn>model
{%- endif -%}